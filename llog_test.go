package llog

import (
	"log"
	"os"
	"testing"
)

func testCriticalf() { // NOTE: # of lines importat for predictable output
	defer func() {
		_ = recover()
	}()
	Criticalf("%s-%s-%s\n", "It", "is", "CRITICALf")
}

func testset(level int) { // NOTE:  # of lines importat for predictable output
	SetLevel(level)
	Debug("It", "is", "DEBUG")
	Debugf("%s-%s-%s\n", "It", "is", "DEBUGf")
	Info("It", "is", "INFO")
	Infof("%s-%s-%s\n", "It", "is", "INFOf")
	Warning("It", "is", "WARNING")
	Warningf("%s-%s-%s\n", "It", "is", "WARNINGf")
	Error("It", "is", "ERROR")
	Errorf("%s-%s-%s\n", "It", "is", "ERRORf")
	defer func() {
		_ = recover()
		testCriticalf()
	}()
	Critical("It", "is", "CRITICAL")
}

func TestMain(m *testing.M) {
	SetLevel(-1)
	SetOutput(os.Stdout)
	SetPrefix("")
	SetFlags(log.Lshortfile)
	os.Exit(m.Run())
}

func ExampleDebugUp() {
	SetOutput(os.Stdout)
	testset(DEBUG)
	// Output:
	// llog_test.go:18: D: It is DEBUG
	// llog_test.go:19: D: It-is-DEBUGf
	// llog_test.go:20: I: It is INFO
	// llog_test.go:21: I: It-is-INFOf
	// llog_test.go:22: W: It is WARNING
	// llog_test.go:23: W: It-is-WARNINGf
	// llog_test.go:24: E: It is ERROR
	// llog_test.go:25: E: It-is-ERRORf
	// llog_test.go:30: C: It is CRITICAL
	// llog_test.go:13: C: It-is-CRITICALf
}

func ExampleInfoUp() {
	SetOutput(os.Stdout)
	testset(INFO)
	// Output:
	// llog_test.go:20: I: It is INFO
	// llog_test.go:21: I: It-is-INFOf
	// llog_test.go:22: W: It is WARNING
	// llog_test.go:23: W: It-is-WARNINGf
	// llog_test.go:24: E: It is ERROR
	// llog_test.go:25: E: It-is-ERRORf
	// llog_test.go:30: C: It is CRITICAL
	// llog_test.go:13: C: It-is-CRITICALf
}

func ExampleWarningUp() {
	SetOutput(os.Stdout)
	testset(WARNING)
	// Output:
	// llog_test.go:22: W: It is WARNING
	// llog_test.go:23: W: It-is-WARNINGf
	// llog_test.go:24: E: It is ERROR
	// llog_test.go:25: E: It-is-ERRORf
	// llog_test.go:30: C: It is CRITICAL
	// llog_test.go:13: C: It-is-CRITICALf
}

func ExampleErrorUp() {
	SetOutput(os.Stdout)
	testset(ERROR)
	// Output:
	// llog_test.go:24: E: It is ERROR
	// llog_test.go:25: E: It-is-ERRORf
	// llog_test.go:30: C: It is CRITICAL
	// llog_test.go:13: C: It-is-CRITICALf
}

func ExampleCriticalUp() {
	SetOutput(os.Stdout)
	testset(CRITICAL)
	// Output:
	// llog_test.go:30: C: It is CRITICAL
	// llog_test.go:13: C: It-is-CRITICALf
}

func ExampleErrorDown() {
	SetOutput(os.Stdout)
	testset(ERROR)
	// Output:
	// llog_test.go:24: E: It is ERROR
	// llog_test.go:25: E: It-is-ERRORf
	// llog_test.go:30: C: It is CRITICAL
	// llog_test.go:13: C: It-is-CRITICALf
}

func Example() {
	l := New(os.Stdout, "", 0, -1)  // set default logging level (WARNING)
	l.Println("It is log.Println message")  // original log method: printed as it is not filtered
	l.Print("WARNING level is set.")
	l.Debug("It is DEBUG message")  // not printed as DEBUG < WARNING
	l.Debugf("%s", "It is formatted DEBUG message")  // not printed as DEBUG < WARNING 
	l.Info("It is INFO message")  // not printed as INFO < WARNING
	l.Infof("%s", "It is formatted INFO message")  // not printed as INFO < WARNING
	l.Warning("It is WARNING message")
	l.Warningf("%s", "It is formatted WARNING message")
	l.Error("It is ERROR message")
	l.Errorf("%s", "It is formatted ERROR message")
	l.SetLevel(DEBUG)  // change level to INFO
	l.Print("DEBUG level is set.")
	l.Debug("It is DEBUG message")  // printed 
	l.Debugf("%s", "It is formatted DEBUG message")  // printed
	l.Info("It is INFO message")  // printed
	l.Infof("%s", "It is formatted INFO message")  // printed
	l.Warning("It is WARNING message")
	l.Warningf("%s", "It is formatted WARNING message")
	l.Error("It is ERROR message")
	l.Errorf("%s", "It is formatted ERROR message")
	// Output:
	// It is log.Println message
	// WARNING level is set.
	// W: It is WARNING message
	// W: It is formatted WARNING message
	// E: It is ERROR message
	// E: It is formatted ERROR message
	// DEBUG level is set.
	// D: It is DEBUG message
	// D: It is formatted DEBUG message
	// I: It is INFO message
	// I: It is formatted INFO message
	// W: It is WARNING message
	// W: It is formatted WARNING message
	// E: It is ERROR message
	// E: It is formatted ERROR message
}

func ExampleCritical() {
	l := New(os.Stdout, "", 0, -1)  // set default logging level (WARNING)
	defer func() {
		_ = recover() // need recover from panic generated by Critical()
	}()
	l.Critical("It is CRITICAL message")  // printed in any logging level
	// Output:
	// C: It is CRITICAL message
}

func ExampleCriticalf() {
	l := New(os.Stdout, "", 0, -1)  // set default logging level (WARNING)
	defer func() {
		_ = recover() // need recover from panic generated by Critical()
	}()
	l.Criticalf("%s", "It is formatted CRITICAL message")  // printed in any logging level
	// Output:
	// C: It is formatted CRITICAL message
}
